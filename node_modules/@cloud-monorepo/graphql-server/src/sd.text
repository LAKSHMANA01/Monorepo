# Navigate to the GraphQL server directory
cd ../../apps/graphql-server

# Initialize package.json
cat > package.json << EOF
{
  "name": "@my-monorepo/graphql-server",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "nodemon src/index.js",
    "build": "rimraf dist && mkdir -p dist && cp -r src/* dist/",
    "start": "node dist/index.js",
    "clean": "rimraf dist"
  },
  "dependencies": {
    "apollo-server-express": "^3.12.0",
    "express": "^4.18.2",
    "graphql": "^16.8.0",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "rimraf": "^5.0.1"
  }
}
EOF

# Create source directory and sample files
mkdir -p src

# Create schema.js with GraphQL schema
cat > src/schema.js << EOF
const { gql } = require('apollo-server-express');

const typeDefs = gql\`
  type User {
    id: ID!
    name: String!
    email: String!
  }

  type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    inStock: Boolean!
  }

  type Query {
    users: [User!]!
    user(id: ID!): User
    products: [Product!]!
    product(id: ID!): Product
  }

  type Mutation {
    addUser(name: String!, email: String!): User!
    addProduct(name: String!, description: String, price: Float!, inStock: Boolean!): Product!
  }
\`;

module.exports = typeDefs;
EOF

# Create resolvers.js
cat > src/resolvers.js << EOF
// Mock data
const users = [
  { id: '1', name: 'John Doe', email: 'john@example.com' },
  { id: '2', name: 'Jane Smith', email: 'jane@example.com' }
];

const products = [
  { id: '1', name: 'Laptop', description: 'High-performance laptop', price: 999.99, inStock: true },
  { id: '2', name: 'Smartphone', description: 'Latest model', price: 699.99, inStock: true },
  { id: '3', name: 'Headphones', description: 'Noise-cancelling', price: 149.99, inStock: false }
];

// Resolvers
const resolvers = {
  Query: {
    users: () => users,
    user: (_, { id }) => users.find(user => user.id === id),
    products: () => products,
    product: (_, { id }) => products.find(product => product.id === id)
  },
  Mutation: {
    addUser: (_, { name, email }) => {
      const newUser = {
        id: String(users.length + 1),
        name,
        email
      };
      users.push(newUser);
      return newUser;
    },
    addProduct: (_, { name, description, price, inStock }) => {
      const newProduct = {
        id: String(products.length + 1),
        name,
        description,
        price,
        inStock
      };
      products.push(newProduct);
      return newProduct;
    }
  }
};

module.exports = resolvers;
EOF

# Create index.js for server setup
cat > src/index.js << EOF
const express = require('express');
const { ApolloServer } = require('apollo-server-express');
const cors = require('cors');
const typeDefs = require('./schema');
const resolvers = require('./resolvers');

async function startServer() {
  const app = express();
  
  // Enable CORS
  app.use(cors());
  
  const server = new ApolloServer({
    typeDefs,
    resolvers,
    context: ({ req }) => {
      // You can add authentication logic here
      return { token: req.headers.authorization || '' };
    }
  });

  await server.start();
  server.applyMiddleware({ app });

  const PORT = process.env.PORT || 4000;
  app.listen(PORT, () => {
    console.log(\`ðŸš€ GraphQL Server running at http://localhost:\${PORT}\${server.graphqlPath}\`);
  });
}
 
startServer();
EOF
# Navigate to the host app directory
cd ../../apps/host

# Install dependencies
cat > package.json << EOF
{
  "name": "@my-monorepo/host",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "vite preview --port 3000",
    "clean": "rimraf dist"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.15.0",
    "@apollo/client": "^3.8.1",
    "graphql": "^16.8.0",
    "@my-monorepo/ui": "*"
  },
  "devDependencies": {
    "@originjs/vite-plugin-federation": "^1.2.3",
    "@vitejs/plugin-react": "^4.0.4",
    "vite": "^4.4.9",
    "@my-monorepo/config": "*",
    "rimraf": "^5.0.1"
  }
}
EOF

# Create vite.config.js using the shared config
cat > vite.config.js << EOF
import { createViteConfig } from '@my-monorepo/config';

export default createViteConfig({
  name: 'host',
  port: 3000,
  exposes: {},
  remotes: {
    remote1: 'http://localhost:3001/assets/remoteEntry.js',
    remote2: 'http://localhost:3002/assets/remoteEntry.js'
  }
});
EOF

# Create the source directory and files
mkdir -p src/components src/pages

# Create index.html
cat > index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Host Application</title>
  <!-- Include Tailwind CDN for quick styling -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.js"></script>
</body>
</html>
EOF

# Create main.js
cat > src/main.js << EOF
import React from 'react';
import ReactDOM from 'react-dom/client';
import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';
import App from './App';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'http://localhost:4000/graphql',
  cache: new InMemoryCache()
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <App />
    </ApolloProvider>
  </React.StrictMode>
);
EOF

# Create App.js
cat > src/App.js << EOF
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import { Button } from '@my-monorepo/ui';

// Lazy load microfrontend components
const Remote1App = lazy(() => import('remote1/App'));
const Remote2App = lazy(() => import('remote2/App'));

// Local components
import Home from './pages/Home';
import Products from './pages/Products';

const App = () => {
  return (
    <Router>
      <div className="min-h-screen bg-gray-100">
        <header className="bg-white shadow-md">
          <nav className="container mx-auto px-4 py-3">
            <ul className="flex space-x-4">
              <li>
                <Link to="/" className="text-blue-600 hover:text-blue-800">Home</Link>
              </li>
              <li>
                <Link to="/products" className="text-blue-600 hover:text-blue-800">Products</Link>
              </li>
              <li>
                <Link to="/remote1" className="text-blue-600 hover:text-blue-800">Remote App 1</Link>
              </li>
              <li>
                <Link to="/remote2" className="text-blue-600 hover:text-blue-800">Remote App 2</Link>
              </li>
            </ul>
          </nav>
        </header>

        <main className="container mx-auto px-4 py-8">
          <Suspense fallback={<div className="text-center py-10">Loading...</div>}>
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/products" element={<Products />} />
              <Route path="/remote1/*" element={<Remote1App />} />
              <Route path="/remote2/*" element={<Remote2App />} />
            </Routes>
          </Suspense>
        </main>

        <footer className="bg-gray-800 text-white py-4">
          <div className="container mx-auto px-4 text-center">
            <p>Â© 2025 My Monorepo Application</p>
          </div>
        </footer>
      </div>
    </Router>
  );
};

export default App;
EOF

# Create Home page
cat > src/pages/Home.js << EOF
import React from 'react';
import { Card } from '@my-monorepo/ui';

const Home = () => {
  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Welcome to the Host Application</h1>
      <p className="mb-6">This is the container application that loads micro frontends.</p>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card title="What are Micro Frontends?">
          Micro frontends are an architectural pattern where frontend applications 
          are decomposed into smaller, semi-independent "microapps" working loosely together.
        </Card>
        
        <Card title="Benefits">
          <ul className="list-disc pl-5">
            <li>Independent deployment</li>
            <li>Autonomous teams</li>
            <li>Separate codebases</li>
            <li>Technology agnostic</li>
          </ul>
        </Card>
      </div>
    </div>
  );
};

export default Home;
EOF

# Create Products page with GraphQL integration
cat > src/pages/Products.js << EOF
import React from 'react';
import { useQuery, gql } from '@apollo/client';
import { Card, Button } from '@my-monorepo/ui';

// GraphQL query
const GET_PRODUCTS = gql\`
  query GetProducts {
    products {
      id
      name
      description
      price
      inStock
    }
  }
\`;

const Products = () => {
  const { loading, error, data } = useQuery(GET_PRODUCTS);

  if (loading) return <p className="text-center py-10">Loading products...</p>;
  if (error) return <p className="text-center py-10 text-red-500">Error loading products: {error.message}</p>;

  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Products</h1>
      <p className="mb-6">These products are fetched from the GraphQL API.</p>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {data.products.map(product => (
          <Card key={product.id} title={product.name}>
            <p className="mb-2">{product.description}</p>
            <p className="text-lg font-bold mb-2">\${product.price.toFixed(2)}</p>
            <p className={product.inStock ? "text-green-600" : "text-red-600"}>
              {product.inStock ? "In Stock" : "Out of Stock"}
            </p>
            <Button variant={product.inStock ? "primary" : "secondary"} className="mt-3">
              {product.inStock ? "Add to Cart" : "Notify Me"}
            </Button>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default Products;
EOF