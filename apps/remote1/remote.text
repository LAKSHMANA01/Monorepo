# Navigate to remote1 directory
cd ../../apps/remote1

# Initialize package.json
cat > package.json << EOF
{
  "name": "@my-monorepo/remote1",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "start": "vite preview --port 3001",
    "clean": "rimraf dist"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.15.0",
    "@apollo/client": "^3.8.1",
    "graphql": "^16.8.0",
    "@my-monorepo/ui": "*"
  },
  "devDependencies": {
    "@originjs/vite-plugin-federation": "^1.2.3",
    "@vitejs/plugin-react": "^4.0.4",
    "vite": "^4.4.9",
    "@my-monorepo/config": "*",
    "rimraf": "^5.0.1"
  }
}
EOF

# Create vite.config.js
cat > vite.config.js << EOF
import { createViteConfig } from '@my-monorepo/config';

export default createViteConfig({
  name: 'remote1',
  port: 3001,
  exposes: {
    // Export components to be used by the host application
    './App': './src/App.js',
    './UserList': './src/components/UserList.js'
  },
  remotes: {}
});
EOF

# Create source directory
mkdir -p src/components

# Create index.html
cat > index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Remote App 1</title>
  <!-- Include Tailwind CDN for quick styling -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.js"></script>
</body>
</html>
EOF

# Create main.js for standalone operation
cat > src/main.js << EOF
import React from 'react';
import ReactDOM from 'react-dom/client';
import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';
import App from './App';

// Initialize Apollo Client
const client = new ApolloClient({
  uri: 'http://localhost:4000/graphql',
  cache: new InMemoryCache()
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <ApolloProvider client={client}>
      <App />
    </ApolloProvider>
  </React.StrictMode>
);
EOF

# Create App.js
cat > src/App.js << EOF
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import UserList from './components/UserList';
import UserDetail from './components/UserDetail';
import { Card } from '@my-monorepo/ui';

const App = () => {
  return (
    <div className="p-4">
      <Card title="Remote App 1">
        <p className="mb-4">This is a micro frontend app that can run independently or be loaded into the host app.</p>
        <Routes>
          <Route path="/" element={<UserList />} />
          <Route path="/user/:id" element={<UserDetail />} />
        </Routes>
      </Card>
    </div>
  );
};

export default App;
EOF

# Create UserList component
cat > src/components/UserList.js << EOF
import React from 'react';
import { useQuery, gql } from '@apollo/client';
import { useNavigate } from 'react-router-dom';
import { Button } from '@my-monorepo/ui';

const GET_USERS = gql\`
  query GetUsers {
    users {
      id
      name
      email
    }
  }
\`;

const UserList = () => {
  const { loading, error, data } = useQuery(GET_USERS);
  const navigate = useNavigate();

  if (loading) return <p>Loading users...</p>;
  if (error) return <p>Error loading users: {error.message}</p>;

  return (
    <div>
      <h2 className="text-xl font-semibold mb-4">User Directory</h2>
      <ul className="space-y-3">
        {data.users.map(user => (
          <li key={user.id} className="border rounded-lg p-3 flex justify-between items-center">
            <div>
              <h3 className="font-medium">{user.name}</h3>
              <p className="text-gray-600">{user.email}</p>
            </div>
            <Button onClick={() => navigate(\`/remote1/user/\${user.id}\`)}>
              View Details
            </Button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;
EOF

# Create UserDetail component
cat > src/components/UserDetail.js << EOF
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, gql } from '@apollo/client';
import { Button } from '@my-monorepo/ui';

const GET_USER = gql\`
  query GetUser($id: ID!) {
    user(id: $id) {
      id
      name
      email
    }
  }
\`;

const UserDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { loading, error, data } = useQuery(GET_USER, {
    variables: { id }
  });

  if (loading) return <p>Loading user details...</p>;
  if (error) return <p>Error: {error.message}</p>;
  if (!data.user) return <p>User not found</p>;

  return (
    <div className="p-4 border rounded-lg">
      <h2 className="text-xl font-bold mb-4">User Details</h2>
      <p className="mb-2"><span className="font-semibold">Name:</span> {data.user.name}</p>
      <p className="mb-4"><span className="font-semibold">Email:</span> {data.user.email}</p>
      <Button onClick={() => navigate('/remote1')}>Back to User List</Button>
    </div>
  );
};

export default UserDetail;
EOF